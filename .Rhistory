list.files("./Inputs")
hackberry_df <- read.csv("./Inputs/2022-06-20-1039_cutting_effects_insitu.xlsx - Measurements.csv")
dogwood_df <- read.csv("2022-06-21-1025_cutting_effects_day2.xlsx - Measurements.csv")
dogwood_df <- read.csv("./Inputs/2022-06-21-1025_cutting_effects_day2.xlsx - Measurements.csv")
View(dogwood_df)
View(hackberry_df)
View(hackberry_df)
?slice
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
?slice
?select
?group_split
?fitaci
library(plantecophys)
?fitaci
?slice
# Subset header row and data rows
hackberry_tib <- slice(hackberry_df, 14, 16:n)
# Subset header row and data rows
hackberry_tib <- slice(hackberry_df, (14, 16:n))
# Subset header row and data rows
hackberry_tib <- slice(hackberry_df, (16:n))
# Subset header row and data rows
hackberry_tib <- slice(hackberry_df, -(1:13))
View(hackberry_tib)
# Subset header row and data rows
hackberry_tib <- slice(hackberry_df, -(1:15))
View(hackberry_tib)
View(hackberry_df)
# Subset header row and data rows
hackberry_head <- slice(hackberry_df, 14)
hackberry_dat <- slice(hackberry_df, -(1:15))
hackberry_head_dat <- rbind(hackberry_head, hackberry_dat)
View(hackberry_head_dat)
?ggplot
?colnames
?col_names
?rename
hackberry_tidy <- rename(hackberry_dat, hackberry_head, .cols = everything())
names(hackberry_dat)
hackberry_tidy <- rename(hackberry_dat, all_of(hackberry_head), .cols = everything())
hackberry_df <- read.csv("./Inputs/2022-06-20-1039_cutting_effects_insitu.xlsx - Measurements.csv",
skip = 13)
View(hackberry_df)
hackberry_df <- read.csv("./Inputs/2022-06-20-1039_cutting_effects_insitu.xlsx - Measurements.csv",
skip = 14)
View(hackberry_df)
View(dogwood_df)
### Group data by tree and leaf number
test <- group_by(hackberry_df, Species, .drop = FALSE)
p1 <- ggplot() +
geom_point(data = hackberry_df, aes(x = Ci, y = A))
p1
# Remove row with units
hackberry_tidy <- slice(hackberry_df, -2)
?slice
# Remove row with units
hackberry_tidy <- slice(hackberry_df, -(2))
View(hackberry_tidy)
View(hackberry_df)
# Remove row with units
hackberry_tidy <- slice(hackberry_df, -(1))
View(hackberry_tidy)
?parse_number
test <- parse_number(hackberry_tidy)
which(is.character(hackberry_tidy))
is.character(hackberry_tidy)
test <- hackberry_tidy %>%
select_if(is.character) %>%
parse_number()
test <- hackberry_tidy %>%
select_if(is.character)
?clean_names
test <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci))
View(test)
?select_if
is.character(hackberry_tidy)
is.character(vars(hackberry_tidy))
vars(hackberry_tidy)
select(hackberry_tidy, where(is.character))
test <- hackberry_tidy %>%
select(is.character)
test <- hackberry_tidy %>%
select(where(is.character))
test <- hackberry_tidy %>%
select(where(is.character)) %>%
parse_number()
test <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(Ci = parse_number(Ca)) %>%
mutate(Ci = parse_number(E)) %>%
select(hackberry_tidy, where(is.character))
test <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(Ci = parse_number(Ca)) %>%
mutate(Ci = parse_number(E)) %>%
)
test <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(Ci = parse_number(Ca)) %>%
mutate(Ci = parse_number(E))
test <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E))
p1 <- ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A))
hackberry_tidy_num <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E))
p1 <- ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A))
p1
test <- group_by(hackberry_df, Species, .drop = FALSE) %>%
ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A))
test
p1 <- ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A, colour = factor(Species)))
p1
p1 <- ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A, colour = factor(Leaf..)))
p1
dogwood_tidy <- slice(dogwood_df, -(1))
dogwood_df <- read.csv("./Inputs/2022-06-21-1025_cutting_effects_day2.xlsx - Measurements.csv",
skip = 14)
# Remove row with units
hackberry_tidy <- slice(hackberry_df, -(1))
dogwood_tidy <- slice(dogwood_df, -(1))
dogwood_tidy_num <- dogwood_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E))
p2 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Leaf..)))
p2
View(dogwood_tidy_num)
p2 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
p2
p3 <- dogwood_tidy_num %>%
filter(Cut. = "Yes") %>%
ggplot() +
geom_point(aes(x = Ci, y = A, colour = factor(Leaf..)))
p3 <- dogwood_tidy_num %>%
filter(Cut. == "Yes") %>%
ggplot() +
geom_point(aes(x = Ci, y = A, colour = factor(Leaf..)))
p3
p3 <- dogwood_tidy_num %>%
filter(Cut. == "Yes") %>%
filter(Leaf.. == "1") %>%
ggplot() +
geom_point(aes(x = Ci, y = A))
p3
?ggsave
### Explot plots
# Plot for Elizabeth Gordon
ggsave("./Outputs/funkyACi.pdf", plot = p3)
p2
p3
View(dogwood_tidy_num)
hackberry_fits <- fitaci(data = hackberry_tidy_num,
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE)
hackberry_tidy_num <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E)) %>%
mutate(Qin = parse_number(Qin)) %>%
mutate(Tleaf = parse_number(Tleaf))
dogwood_tidy_num <- dogwood_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E)) %>%
mutate(Qin = parse_number(Qin)) %>%
mutate(Tleaf = parse_number(Tleaf))
# ### Group data by tree and leaf number
# test <- group_by(hackberry_df, Species, .drop = FALSE) %>%
#   ggplot() +
### Fit A/Ci curves ----------------------------
hackberry_fit <- fitaci(data = hackberry_tidy_num,
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE)
plot(hackberry_fit)
View(hackberry_tidy_num)
p1
p2
View(dogwood_tidy_num)
dogwood_fits <- fitacis(data = dogwood_tidy_num,
group = "Cut.",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE)
plot(fits[[1]])
plot(dogwood_fits[[1]])
plot(dogwood_fits[[2]])
p3
p2
View(dogwood_tidy_num)
# Example of removing bad data point before curve fitting:
Ci_outlier_index <- which(dogwood_tidy_num$Ci < 100)
Ci_outlier_index
View(dogwood_tidy_num)
dogwood_tidy_num <- filter(dogwood_tidy_num, !row_number(74))
p4 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
p4
p4 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
p4
hackberry_tidy <- slice(hackberry_df, -(1))
dogwood_tidy <- slice(dogwood_df, -(1))
# Convert important columns from character to numeric before plotting and fitting curves
# (There's probably a more efficient way to do this using "select" instead of naming each column)
hackberry_tidy_num <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E)) %>%
mutate(Qin = parse_number(Qin)) %>%
mutate(Tleaf = parse_number(Tleaf))
dogwood_tidy_num <- dogwood_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E)) %>%
mutate(Qin = parse_number(Qin)) %>%
mutate(Tleaf = parse_number(Tleaf))
# ### Group data by tree and leaf number (might be useful)
# test <- group_by(hackberry_df, Species, .drop = FALSE) %>%
#   ggplot() +
#   geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A))
### Plot A/Ci curves --------------------------
# for Hackberry
p1 <- ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A, colour = factor(Leaf..)))
# for dogwood
p2 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
p3 <- dogwood_tidy_num %>%
filter(Cut. == "Yes") %>%
filter(Leaf.. == "1") %>%
ggplot() +
geom_point(aes(x = Ci, y = A))
# Example of removing bad data point before curve fitting:
Ci_outlier_index <- which(dogwood_tidy_num$Ci < 100) #74th entry. It was after the curve. Accidental log?
dogwood_tidy_num <- filter(dogwood_tidy_num, row_number(74))
?row_number
dogwood_tidy_num <- filter(dogwood_tidy_num, Ci > 100)
p4 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
dogwood_fits <- fitacis(data = dogwood_tidy_num,
group = "Cut.",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE)
plot(dogwood_fits[[1]])
plot(dogwood_fits[[2]])
dogwood_fits2 <- fitacis(data = dogwood_tidy_num,
group = "Cut.",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE,
fitTPU = TRUE)
plot(dogwood_fits2[[1]])
plot(dogwood_fits2[[2]])
library(plantecophys)
library(plantecophys)
library(tidyverse)
setwd("/Volumes/GoogleDrive/My Drive/Albert Lab General/DAT Practice June 2022")
setwd("/Volumes/GoogleDrive/My Drive/Albert Lab General/DAT Practice June 2022")
# Skip the metadata to get a tidier data frame during import
hackberry_df <- read.csv("./Inputs/2022-06-20-1039_cutting_effects_insitu.xlsx - Measurements.csv",
skip = 14)
dogwood_df <- read.csv("./Inputs/2022-06-21-1025_cutting_effects_day2.xlsx - Measurements.csv",
skip = 14)
View(dogwood_df)
View(dogwood_df)
# Convert important columns from character to numeric before plotting and fitting curves
# (There's probably a more efficient way to do this using "select" instead of naming each column)
hackberry_tidy_num <- hackberry_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E)) %>%
mutate(Qin = parse_number(Qin)) %>%
mutate(Tleaf = parse_number(Tleaf))
dogwood_tidy_num <- dogwood_tidy %>%
mutate(Ci = parse_number(Ci)) %>%
mutate(A = parse_number(A)) %>%
mutate(Ca = parse_number(Ca)) %>%
mutate(E = parse_number(E)) %>%
mutate(Qin = parse_number(Qin)) %>%
mutate(Tleaf = parse_number(Tleaf))
View(dogwood_tidy_num)
View(hackberry_tidy_num)
### Plot A/Ci curves --------------------------
# for Hackberry
p1 <- ggplot() +
geom_point(data = hackberry_tidy_num, aes(x = Ci, y = A, colour = factor(Leaf..)))
p1
# for dogwood
p2 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
p2
p3 <- dogwood_tidy_num %>%
filter(Cut. == "Yes") %>%
filter(Leaf.. == "1") %>%
ggplot() +
geom_point(aes(x = Ci, y = A))
p3
# Example of removing bad data point before curve fitting:
Ci_outlier_index <- which(dogwood_tidy_num$Ci < 100) #74th entry. It was after the curve. Accidental log?
Ci_outlier_index
dogwood_tidy_num <- filter(dogwood_tidy_num, Ci > 100)
p4 <- ggplot() +
geom_point(data = dogwood_tidy_num, aes(x = Ci, y = A, colour = factor(Cut.)))
p4
?fitaci
### Fit A/Ci curves ----------------------------
hackberry_fit <- fitaci(data = hackberry_tidy_num,
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE)
plot(hackberry_fit)
?fitacis
dogwood_fits <- fitacis(data = dogwood_tidy_num,
group = "Cut.",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE)
plot(dogwood_fits[[1]])
plot(dogwood_fits[[2]])
# Let's try adding the TPU limitation
dogwood_fits2 <- fitacis(data = dogwood_tidy_num,
group = "Cut.",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
Tcorrect = TRUE,
fitTPU = TRUE)
plot(dogwood_fits2[[1]])
summary(dogwood_fits2[[1]])
?fitaci
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$PARi, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$Photo)
plot(x$Ci, x$A)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$A)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$A)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$A)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$A)
plot(x$Ci, x$Photo)
x <- read.delim(pipe("pbpaste"))
plot(x$Ci, x$Photo)
# Load Packages/Data ------------------------------------------------------
## Load Packages
library(tidyverse)
library(plantecophys)
# Load Data
## I'm gonna work on a way to make this universal
complete_sp <- read.csv("~/Documents/PhD/DAT_Tapajos/Inputs/clean_aci_data_one_file.csv")
getwd()
setwd("~/Documents/Repos/DAT_Proj_LPA")
getwd()
test <- read.csv("test.csv", sep = ",")
complete_sp <- read.csv("clean_aci_data_one_file.csv", sep = ",")
complete_sp <- read.csv("Inputs/clean_aci_data_one_file.csv", sep = ",")
complete_sp <- read.csv("Inputs/clean_aci_data_one_file.csv",
sep = ",",
fileEncoding="latin1")
View(complete_sp)
complete_sp <- read.csv("Inputs/clean_aci_data_one_file.csv",
sep = ",",
fileEncoding="latin1")
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 31) # 2 A values greater than 31: 399 and 400
complete_sp[c(397,398,399,400,401),17]
cmplt.rm_out <- filter(complete_sp, Ci > -50 & A < 31)
## Group by Four Letter Code
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode)
## Plot all ACi curves on one graph by Species
ggplot(cmplt.grp, mapping = aes(x = Ci, y = A, color = fourlettercode)) +
geom_point(mapping = aes(pch = Data_point)) +
theme_classic()
## Make and save plots for each individual species
for (code in unique(cmplt.grp$fourlettercode)) {
df1 <- cmplt.grp %>% filter(fourlettercode == code)
gg1 <- ggplot(data = df1, mapping = aes(x = Ci, y = A, color = Data_point)) +
geom_point() +
theme_classic() +
scale_color_viridis_d() +
ggtitle(code)
plot(gg1)
filename1 <- paste("plot_", code, ".png")
ggsave(filename1, gg1)
}
# Fit the ACi curves for each species for DAT and Traditional, respectively
######## This is the part that is broken :(
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT")
View(cmplt_DAT)
DAT_fits <- fitacis(cmplt_DAT, group = "fourlettercode",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE,
id = Leaf_number)
fitacis
?is.tibble
is_tibble(cmplt_DAT)
cmplt_DAT[1]
unique(cmplt_DAT$fourlettercode
)
cmplt_DAT$Leaf_number[1]
cmplt_DAT$Leaf_number
for (code in unique(cmplt_DAT$fourlettercode)) {
dat <- cmplt_DAT$fourlettercode[code]
head(dat)
}
for (code in unique(cmplt_DAT$fourlettercode)) {
dat <- cmplt_DAT$fourlettercode[code]
print(head(dat))
}
length(unique(cmplt_DAT$fourlettercode)
)
for (code in length(unique(cmplt_DAT$fourlettercode))) {
dat <- cmplt_DAT$fourlettercode[code]
print(head(dat))
}
dat
dat <- cmplt_DAT$fourlettercode == cmplt_DAT$fourlettercode[code]
dat
for (code in length(unique(cmplt_DAT$fourlettercode))) {
ind <- cmplt_DAT$fourlettercode == cmplt_DAT$fourlettercode[code]
dat <- cmplt_DAT[ind]
print(head(dat))
}
length(ind)
length(cmplt_DAT)
dim(cmplt_DAT)
for (code in length(unique(cmplt_DAT$fourlettercode))) {
ind <- cmplt_DAT$fourlettercode == cmplt_DAT$fourlettercode[code]
dat <- cmplt_DAT[ind, ]
print(head(dat))
}
cmplt_DAT$fourlettercode[code]
View(dat)
dat$fourlettercode
code
dat$Leaf_number[lf]
for (lf in dat$Leaf_number[code]){
indlf <- dat$Leaf_number == dat$Leaf_number[lf]
datlf <- dat[indlf, ]
fit <- fitaci(data = datlf[lf], varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"),
fitTPU = FALSE, Tcorrect = TRUE)
assign(paste0("fit_", cmplt_DAT$fourlettercode[code], ), fit)
}
unique(dat$Leaf_number)
for (lf in length(unique(dat$Leaf_number))){
indlf <- dat$Leaf_number == dat$Leaf_number[lf]
datlf <- dat[indlf, ]
fit <- fitaci(data = datlf[lf], varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"),
fitTPU = FALSE, Tcorrect = TRUE)
assign(paste0("fit_", cmplt_DAT$fourlettercode[code], dat$Leaf_number[lf]), fit)
}
lf
length(unique(dat$Leaf_number)
)
indlf <- dat$Leaf_number == dat$Leaf_number[lf]
indlf
length(indlf)
length(dat)
dim(dat)
datlf <- dat[indlf, ]
View(datlf)
unique(datlf$Leaf_number)
unique(datlf$Species)
for (lf in length(unique(dat$Leaf_number))){
indlf <- dat$Leaf_number == dat$Leaf_number[lf]
datlf <- dat[indlf, ]
fit <- fitaci(data = datlf, varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"),
fitTPU = FALSE, Tcorrect = TRUE)
assign(paste0("fit_", cmplt_DAT$fourlettercode[code], dat$Leaf_number[lf]), fit)
}
