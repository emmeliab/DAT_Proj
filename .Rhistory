complete_sp <- slice(complete_sp, -(397:402))
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[7]], main = coef(DAT_fits)$unique[[7]])
coef(DAT_fits)
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
complete_sp[c(397:402),]  ## I visually identified these outliers for K6709L2-2
complete_sp[c(7993:8025),] ## K6706L1 outliers
#complete_sp <- slice(complete_sp, -(7993:8025))
complete_sp <- slice(complete_sp, -(397:402))
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[7]], main = coef(DAT_fits)$unique[[7]])
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
k6706l1 <- cmplete_sp %>% subset(unique == 'K6706L1')
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1')
View(k6706l1)
complete_sp[c(397:402),]  ## I visually identified these outliers for K6709L2-2
complete_sp[c(7992:8025),] ## K6706L1 outliers
complete_sp <- slice(complete_sp, -(7992:8025)) #throws an error if I filter these ones!
complete_sp <- slice(complete_sp, -(397:402))
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[7]], main = coef(DAT_fits)$unique[[7]])
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1') #looking at individual leaf
ggplot(k6706l1) %>%
geom_point(aes(x = A, y = Ci))
ggplot(data = k6706l1) %>%
geom_point(mapping(aes(x = A, y = Ci)))
ggplot() +
geom_point(data = k6706l1, aes(x = A, y = Ci))
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A))
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = "Data_point"))
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
k6709l6 <- complete_sp %>% subset(unique == 'K6706L6')
View(k6709l6)
View(complete_sp)
k6709l6 <- complete_sp %>% subset(unique == 'K6709L6')
View(k6709l6)
ggplot() +
geom_point(data = k6709l6, aes(x = Ci, y = A, color = Data_point))
complete_sp[c(1597),]
complete_sp[c(1596),]
complete_sp[c(1564),]
#complete_sp <- slice(complete_sp, -(7992:8025)) #it still throws an error if I filter these ones!
complete_sp <- slice(complete_sp, -(1564:1595))
complete_sp <- slice(complete_sp, -(397:402))
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[7]], main = coef(DAT_fits)$unique[[7]])
coef(DAT_fits)
plot(DAT_fits[[18]], main = coef(DAT_fits)$unique[[18]]) ##keep an eye on #7 as the example
plot(DAT_fits[[20]], main = coef(DAT_fits)$unique[[20]]) ##keep an eye on #7 as the example
plot(DAT_fits[[14]], main = coef(DAT_fits)$unique[[14]]) ##keep an eye on #7 as the example
plot(DAT_fits[[13]], main = coef(DAT_fits)$unique[[13]]) ##keep an eye on #7 as the example
plot(DAT_fits[[12]], main = coef(DAT_fits)$unique[[12]]) ##keep an eye on #7 as the example
complete_sp[c(7589)]
complete_sp[c(7589),]
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
complete_sp[c(7589),]
complete_sp[c(7606),]
#complete_sp <- slice(complete_sp, -(7992:8025)) #it still throws an error if I filter these ones!
complete_sp <- slice(complete_sp, -(7589:7606))
complete_sp <- slice(complete_sp, -(1564:1595)) # This one worked
complete_sp <- slice(complete_sp, -(397:402)) #
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[12]], main = coef(DAT_fits)$unique[[12]]) ##keep an eye on #7 as the example
coef(DAT_fits)
plot(DAT_fits[[11]], main = coef(DAT_fits)$unique[[11]]) ##keep an eye on #7 as the example
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
complete_sp[c(7217),]
complete_sp[c(7196),]
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
complete_sp[c(397:402),]  ## K6709L2-2 outliers
complete_sp[c(799:8025),] ## K6706L1 outliers
complete_sp[c(1564:1595),] ## K6709L6 outliers (back-correction)
complete_sp[c(7196:7217),] ## K6707L2 outliers (back correction)
complete_sp[c(7589:7606),] ## K6707L2-2 outliers (back correction)
#important to slice in descending order!!
#complete_sp <- slice(complete_sp, -(7992:8025)) #it still throws an error if I filter these ones!
complete_sp <- slice(complete_sp, -(7589:7606)) # This one (mostly) worked
complete_sp <- slice(complete_sp, -(7196:7217)) #
complete_sp <- slice(complete_sp, -(1564:1595)) # This one worked
complete_sp <- slice(complete_sp, -(397:402)) #
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[11]], main = coef(DAT_fits)$unique[[11]]) ##keep an eye on #7 as the example
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
#important to slice in descending order!!
#complete_sp <- slice(complete_sp, -(7992:8025)) #it still throws an error if I filter these ones!
complete_sp <- slice(complete_sp, -(7589:7606)) # This one (mostly) worked
complete_sp <- slice(complete_sp, -(7196:7229)) # This one didn't work
complete_sp <- slice(complete_sp, -(1564:1595)) # This one worked
complete_sp <- slice(complete_sp, -(397:402)) #
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[11]], main = coef(DAT_fits)$unique[[11]]) ##keep an eye on #7 as the example
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1') #looking at individual leaf
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6709l2_2 <- complete_sp %>% subset(unique == 'K6709L2-2')
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
complete_sp[c(397:402),]  ## K6709L2-2 outliers (back-correction)
complete_sp[c(799:8025),] ## K6706L1 outliers (back-correction)
complete_sp[c(1564:1595),] ## K6709L6 outliers (back-correction)
complete_sp[c(7196:7216),] ## K6707L2 outliers (back correction)
complete_sp[c(7589:7606),] ## K6707L2-2 outliers (back correction)
#important to slice in descending order!!
#complete_sp <- slice(complete_sp, -(7992:8025)) #it still throws an error if I filter these ones!
complete_sp <- slice(complete_sp, -(7589:7606)) # This one (mostly) worked
#complete_sp <- slice(complete_sp, -(7196:7216)) # This one didn't work; DAT id: [[11]]
complete_sp <- slice(complete_sp, -(1564:1595)) # This one worked
complete_sp <- slice(complete_sp, -(397:402)) #
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[11]], main = coef(DAT_fits)$unique[[11]]) ##keep an eye on #7 as the example
plot(DAT_fits[[16]], main = coef(DAT_fits)$unique[[16]]) ##keep an eye on #7 as the example
plot(trad_fits[[14]], main = coef(trad_fits)$unique[14]) # 20 is pretty ugly
plot(DAT_fits[[15]], main = coef(DAT_fits)$unique[[15]]) ##keep an eye on #7 as the example
plot(DAT_fits[[14]], main = coef(DAT_fits)$unique[[14]]) ##keep an eye on #7 as the example
plot(DAT_fits[[13]], main = coef(DAT_fits)$unique[[13]]) ##keep an eye on #7 as the example
plot(DAT_fits[[12]], main = coef(DAT_fits)$unique[[12]]) ##keep an eye on #7 as the example
plot(DAT_fits[[18]], main = coef(DAT_fits)$unique[[18]]) ##keep an eye on #7 as the example
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6709l2_2 <- complete_sp %>% subset(unique == 'K6709L2-2')
ggplot() +
geom_point(data = k6709l2_2, aes(x = Ci, y = A, color = Data_point))
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6709l2 <- complete_sp %>% subset(unique == 'K6709L2')
ggplot() +
geom_point(data = k6709l2, aes(x = Ci, y = A, color = Data_point))
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1')
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
# Load Packages/Data ------------------------------------------------------
## Load Packages
library(tidyverse)
library(plantecophys)
library(greekLetters)
library(ggpubr)
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1')
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[18]], main = coef(DAT_fits)$unique[[18]]) ##keep an eye on #7 as the example
coef(DAT_fits)
# I made a for loop that saves all the plots
# I slightly modified it to specify DAT ACi curves
for (curve in 1:33){
title <- coef(DAT_fits)$unique[[curve]]
png(filename = paste0(getwd(), "/Outputs/", title,"_dataci_curve.png"))
plot(DAT_fits[[curve]], main = title)
dev.off()
}
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1')
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
complete_sp[c(397:402),]  ## K6709L2-2 outliers (back-correction); coef_DAT id: [[16]]
complete_sp[c(799:8025),] ## K6706L1 outliers (back-correction); coef_DAT id: [[7]]
complete_sp[c(1564:1595),] ## K6709L6 outliers (back-correction); coef_DAT id: [[18]]
complete_sp[c(7196:7216),] ## K6707L2 outliers (back correction); coef_DAT id: [[11]]
complete_sp[c(7589:7606),] ## K6707L2-2 outliers (back correction); coef_DAT id: [[12]]
#important to slice in descending order!!
#complete_sp <- slice(complete_sp, -(7992:8025)) # This one didn't work
complete_sp <- slice(complete_sp, -(7589:7606)) # This one (somewhat) worked
#complete_sp <- slice(complete_sp, -(7196:7216)) # This one didn't work
complete_sp <- slice(complete_sp, -(1564:1595)) # This one worked
complete_sp <- slice(complete_sp, -(397:402)) # This one worked
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[18]], main = coef(DAT_fits)$unique[[18]]) ##keep an eye on #7 as the example
coef(DAT_fits)
# I made a for loop that saves all the plots
# I slightly modified it to specify DAT ACi curves
for (curve in 1:33){
title <- coef(DAT_fits)$unique[[curve]]
png(filename = paste0(getwd(), "/Outputs/", title,"_dataci_curve.png"))
plot(DAT_fits[[curve]], main = title)
dev.off()
}
# Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",",
fileEncoding="latin1") #changed this to work on anyone's computer
#Create an id data table. This includes the species code so we can merge it later
unique_ids <- read.csv("Inputs/unique_ids.csv") # same here
#Made this separate dataframe and plot to make it easy to inspect any given leaf
k6706l1 <- complete_sp %>% subset(unique == 'K6706L1')
ggplot() +
geom_point(data = k6706l1, aes(x = Ci, y = A, color = Data_point))
#important to slice in descending order!!
#complete_sp <- slice(complete_sp, -(7992:8025)) # This one didn't work
#complete_sp <- slice(complete_sp, -(7589:7606)) # This one (somewhat) worked
#complete_sp <- slice(complete_sp, -(7196:7216)) # This one didn't work
#complete_sp <- slice(complete_sp, -(1564:1595)) # This one worked
complete_sp <- slice(complete_sp, -(799:825)) # did it work?
which(complete_sp$Ci < -50) #4 Ci values are super negative: 394, 395, 396, 398
which(complete_sp$Ci < -5) # Add in 16 more values, all for MACA1
complete_sp[c(394,395,396,398),19] # What are those values? Should they be outliers?
which(complete_sp$A > 40)
which(complete_sp$A < -1)
cmplt.rm_out1 <- filter(complete_sp, Ci > -5)
cmplt.rm_out2 <- filter(cmplt.rm_out1, A < 40) ## A < 40
cmplt.rm_out <- filter(cmplt.rm_out2, A > -1)
## Group by unique
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode) %>%
group_by(unique)
## Separate by DAT and trad, and convert to dataframe
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT") %>%
select(-contains(greeks("Delta"))) #removes the columns with deltas
cmplt_DAT <- as.data.frame(cmplt_DAT)
head(cmplt_DAT)
cmplt_trad <- filter(cmplt.grp, Data_point == "Traditional") %>%
select(-contains(greeks("Delta")))
cmplt_trad <- as.data.frame(cmplt_trad)
head(cmplt_trad)
# Fit the ACi curves for each species for DAT using fitacis
DAT_fits <- fitacis(cmplt_DAT, group = "unique", id = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
plot(DAT_fits[[18]], main = coef(DAT_fits)$unique[[18]]) ##keep an eye on #7 as the example
coef(DAT_fits)
# I made a for loop that saves all the plots
# I slightly modified it to specify DAT ACi curves
for (curve in 1:33){
title <- coef(DAT_fits)$unique[[curve]]
png(filename = paste0(getwd(), "/Outputs/", title,"_dataci_curve.png"))
plot(DAT_fits[[curve]], main = title)
dev.off()
}
plot(DAT_fits[[7]], main = coef(DAT_fits)$unique[[7]])
