source("C:/Users/emmel/AppData/Local/Packages/microsoft.windowscommunicationsapps_8wekyb3d8bbwe/LocalState/Files/S0/51/Attachments/Emmy_R[4276].R")
source("C:/Users/emmel/AppData/Local/Packages/microsoft.windowscommunicationsapps_8wekyb3d8bbwe/LocalState/Files/S0/51/Attachments/Emmy_R[4276].R")
source("C:/Users/emmel/AppData/Local/Packages/microsoft.windowscommunicationsapps_8wekyb3d8bbwe/LocalState/Files/S0/51/Attachments/Emmy_R[4276].R")
source("C:/Users/emmel/AppData/Local/Packages/microsoft.windowscommunicationsapps_8wekyb3d8bbwe/LocalState/Files/S0/51/Attachments/Emmy_R[4276].R", echo=TRUE)
# data_pivot <- pivot_longer(data, cols=c(Jun.15, Jun.22, Jul.6, Jul.13, Jul.20, Jul.27, Aug.3, Aug.10), names_to = 'Date', values_to = 'Diameter')
data_pivot$Accession_ID <- as.character(data_pivot$Accession_ID)
f <- 1
View(f)
install.packages(dplyr)
install.packages("dplyr")
??corrplot
?corrplot
?round
?read.csv
?data.frame
library(tidyverse)
?plot
library(help = "base")
plot(cars)
df <- merge(c(1,2,3), c(4,6,8))
df
plot(df)
plot(df, x~y)
plot(df, y~x)
plot(df, x, y)
?plot
plot(c(2,4,6), c(5,6,7))
plot(y~x, data = df)
plot(x~y, data = df)
?require
?boxplot
?barplot
barplot(df)
barplot(y~x, data = df)
View(height4)
height4
head(longley)
barplot(GNP ~ Year, data = ongley)
barplot(GNP ~ Year, data = longley)
?hist
head(islands)
hist(islands)
?boxplot
?pie
?plot
?barplot
?hist
?boxplot
?pie
?pch
?lty
?plot
colors()
palette()
palette.colors()
palette.pals()
library(RColorBrewer)
brewer.pal()
?RColorBrewer
brewer.pal.info
library(ggplot2)
?geom_point
?aes
library(ggplot2)
?aes
?geom_bar
library(ggplot2)
?geom_bar
library(ggplot2)
library(plantecophys)
library(tidyverse)
## Plot all ACi curves on one graph by Species
ggplot(cmplt.grp, mapping = aes(x = Ci, y = A, color = fourlettercode)) +
geom_point(mapping = aes(pch = Data_point)) +
theme_classic()
## Load Packages
library(tidyverse)
library(plantecophys)
## Plot all ACi curves on one graph by Species
ggplot(cmplt.grp, mapping = aes(x = Ci, y = A, color = fourlettercode)) +
geom_point(mapping = aes(pch = Data_point)) +
theme_classic()
source("C:/Users/emmel/Desktop/DAT_proj/Tapajos_DAT_data_assembly.R", echo=TRUE)
cmplt.rm_out <- filter(complete_sp, Ci > -50 & A < 31)
## Group by Four Letter Code
cmplt.grp <- group_by(cmplt.rm_out, fourlettercode)
## Plot all ACi curves on one graph by Species
ggplot(cmplt.grp, mapping = aes(x = Ci, y = A, color = fourlettercode)) +
geom_point(mapping = aes(pch = Data_point)) +
theme_classic()
for (code in unique(cmplt.grp$fourlettercode)) {
df1 <- cmplt.grp %>% filter(fourlettercode == code)
gg1 <- ggplot(data = df1, mapping = aes(x = Ci, y = A, color = Data_point)) +
geom_point() +
theme_classic() +
scale_color_viridis_d()
filename1 <- paste("plot_", code, ".png")
ggsave(filename1, gg1)
}
cmplt_DAT <- filter(cmplt.grp, Data_point == "Before_DAT")
DAT_fits <- fitacis(cmplt_DAT, group = "fourlettercode",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE,
id = Leaf_number)
### Leaf 1 Trad
abma <- filter(complete_sp, fourlettercode == "ABMA")
abma_trad <- filter(abma, Data_point == "Traditional")
abma_trad_l1 <- filter(abma_trad, Leaf_number == 1)
abma_trad_aci_l1 <- fitaci(data = abma_trad_l1,
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
fitTPU = TRUE,
Tcorrect = TRUE)
warnings()
library(tidyverse)
library(plantecophys)
#library(RCurl)
DAT_fits <- fitacis(cmplt_DAT, group = "fourlettercode",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE,
id = Leaf_number)
fitacis
data <- cmplt_DAT
d <- split(data, data[, "fourlettercode"])
fitacis(d, fourlettercode, varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE)
fitacis(data, fourlettercode, varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE)
fitacis(d, "fourlettercode", varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE)
fitacis(data, "fourlettercode", varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE)
fitaci(d$ABMA, varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE)
abma_trad_aci_l1 <- fitaci(data = abma_trad_l1,
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
fitTPU = TRUE,
Tcorrect = TRUE)
warnings()
colnames(cmplt_DAT)
## Plot all ACi curves on one graph by Species
ggplot(cmplt.grp, mapping = aes(x = Ci, y = A, color = fourlettercode)) +
geom_point(mapping = aes(pch = Data_point)) +
theme_classic()
for (code in unique(cmplt.grp$fourlettercode)) {
df1 <- cmplt.grp %>% filter(fourlettercode == code)
gg1 <- ggplot(data = df1, mapping = aes(x = Ci, y = A, color = Data_point)) +
geom_point() +
theme_classic() +
scale_color_viridis_d()
filename1 <- paste("plot_", code, ".png")
ggsave(filename1, gg1)
}
getwd()
library(plantecophys)
library(photosynthesis)
fitaci()
fitaci
do_acirun
photosynthesis
fit_aci_response
library(plantecophys)
fitaci
?any()
library(tidyverse)
library(greekLetters)
library(ggpubr)
wd <- "/Users/emmel/Desktop/DAT_proj/"
setwd(wd)
# Identify and Filter Outliers ---------------------------------------------------
## Load Data
complete_sp <- read.csv("Inputs/clean_aci_with_uniquecode.csv", sep = ",", header = TRUE,
fileEncoding="latin1")
complete_sp <- filter(complete_sp, Data_QC == "OK") # All A/Ci curve data
unique_ids <- read.csv("Inputs/unique_ids.csv") # ID data table
## Make function to find min Ci and exclude points with Anet below the Anet for that min Ci
exclude_backwardsCi <- function(data, givedf){
min_Ci_ind <- which(data$Ci == min(data$Ci))
data_new <- slice(data, -which(data$A < data$A[min_Ci_ind]))
if(givedf =="TRUE"){
data_new <- as.data.frame(data_new)
}
return(data_new)
}
library(plantecophys)
cmplt.rm_out <- read.csv(file = paste0(wd, "Inputs/Aci_no_out.csv"), header = TRUE, sep = ",")
cmplt_DAT <- filter(cmplt.rm_out, Data_point == "Before_DAT")
cmplt_trad <- filter(cmplt.rm_out, Data_point == "Traditional")
DAT_filt_ex <- cmplt_DAT %>%
group_by(unique) %>%
group_modify(~exclude_backwardsCi(data = .x, givedf = TRUE), .keep = FALSE)
DAT_filt_ex <- as.data.frame(DAT_filt_ex)
## Fit the ACi curves for each species for DAT using fitacis
DAT_fits_ecophys <- fitacis(DAT_filt_ex, group = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE, citransition = 300)
## Fit the ACi curves for each species for DAT using fitacis
DAT_fits_ecophys <- fitacis(DAT_filt_ex, group = "unique",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
## Fit the ACi curves for each species for DAT using fitacis
DAT_fits_ecophys <- fitacis(DAT_filt_ex, group = "unique", fitmethod = "bilinear"
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
## Fit the ACi curves for each species for DAT using fitacis
DAT_fits_ecophys <- fitacis(DAT_filt_ex, group = "unique", fitmethod = "bilinear",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
View(DAT_fits_ecophys)
fitacis()
?fitacis
## Fit the ACi curves for each species for DAT using fitacis
DAT_fits_ecophys <- fitacis(DAT_filt_ex, group = "unique", fitmethod = "bilinear",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
### Run K6706L1 separately, since it gives a weird curve
k6714l1 <- filter(DAT_filt_ex, unique == "K6714L1")
k6714l1_fit <- fitaci(k6714l1, fitmethod = "bilinear", varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE,
citransition = 200) # The Ci transition is specified as 200, as per Sharkey's
# recommendations and to avoid an unreasonable Jmax value
plot(k6714l1_fit)
coef(k6714l1_fit)
View(DAT_fits_ecophys)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat <- par_dat[-1,]
par_dat <- par_dat %>%
add_column(method = "dat")
table(par_dat$method) ## number of initial DAT curves
# Fit the ACi curves for Traditional using fitacis
trad_fits_ecophys <- fitacis(cmplt_trad, group = "unique", fitmethod = "bilinear",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = TRUE, Tcorrect = TRUE)
## Make a dataframe of coefficients
par_trad <- as.data.frame(coef(trad_fits_ecophys), row.names = NULL)
par_trad <- par_trad[-1,]
par_trad <- par_trad %>%
add_column(method = "trad")
?rbind.data.frame
par_dat <- rbind.data.frame(coef(k6706l1_fit))
par_dat <- rbind.data.frame(coef(k6714l1_fit))
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat <- rbind.data.frame(coef(k6714l1_fit))
par_dat <- par_dat[-1,]
par_dat <- par_dat %>%
add_column(method = "dat")
table(par_dat$method) ## number of initial DAT curves
View(par_dat)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat <- rbind(coef(k6714l1_fit))
par_dat <- par_dat[-1,]
par_dat <- par_dat %>%
add_column(method = "dat")
View(par_dat)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
View(par_dat)
par_dat[23] <- coef(k6714l1_fit)
par_dat[,23] <- coef(k6714l1_fit)
par_dat[23] <- as.data.frame(coef(k6714l1_fit), row.names = NULL)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat[23] <- as.data.frame(coef(k6714l1_fit), row.names = NULL)
View(par_dat)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
View(par_dat)
par_dat <- par_dat[-1,]
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
View(par_dat)
as.data.frame(coef(k6714l1_fit), row.names = NULL)
test <- as.data.frame((coef(k6714l1_fit)))
View(test)
test <- as.data.frame(coef(k6714l1_fit), row.names = NULL)
View(test)
coef(k6714l1_fit)
par_dat[23] <- coef(k6714l1_fit)
k6714l1_fit
View(par_dat)
par_dat[23] <- c("K6714L1", 20.8393492, 13.5285784, 0.1658439, 0.47818072, NA, 0.02406953)
par_dat[,23] <- c("K6714L1", 20.8393492, 13.5285784, 0.1658439, 0.47818072, NA, 0.02406953)
par_dat[1,23] <- "K6714L1"
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat[1,23] <- "K6714L1"
par_dat <- par_dat[-23]
View(par_dat)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat <- par_dat[-24]
View(par_dat)
par_dat <- par_dat[-23]
par_dat <- par_dat[-1,]
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat[-23,] <- as.data.frame(coef(k6714l1_fit), row.names = NULL)
par_dat[23,] <- as.data.frame(coef(k6714l1_fit), row.names = NULL)
par_dat[23,] <- c("K6714L1", 20.8393492, 13.5285784, 0.1658439, 0.47818072, NA, 0.02406953)
View(par_dat)
#par_dat <- par_dat[-1,]
par_dat <- par_dat %>%
add_column(method = "dat")
table(par_dat$method) ## number of initial DAT curves
View(par_trad)
## Make a dataframe of coefficients
par_trad <- as.data.frame(coef(trad_fits_ecophys), row.names = NULL)
View(par_trad)
# Fit the ACi curves for Traditional using fitacis
trad_fits_ecophys <- fitacis(cmplt_trad, group = "unique", fitmethod = "bilinear",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
## Make a dataframe of coefficients
par_trad <- as.data.frame(coef(trad_fits_ecophys), row.names = NULL)
View(par_trad)
#par_trad <- par_trad[-1,]
par_trad <- par_trad %>%
add_column(method = "trad")
# Merge DAT and Trad coef dfs
par_join <- bind_rows(par_dat, par_trad)
par_dat$Vcmax <- as.double(par_dat$Vcmax)
# Merge DAT and Trad coef dfs
par_join <- bind_rows(par_dat, par_trad)
par_dat[,2:6] <- as.double()
par_dat[,2:6] <- as.double(par_dat[,2:6])
par_dat[,2:4] <- as.double(par_dat[,2:4])
par_dat$Jmax <- as.double(par_dat$Jmax)
# Merge DAT and Trad coef dfs
par_join <- bind_rows(par_dat, par_trad)
par_dat[23,] <- c("K6714L1", as.double(20.8393492), as.double(13.5285784), as.double(0.1658439), as.double(0.47818072), NA, as.double(0.02406953))
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat[23,] <- c("K6714L1", as.double(20.8393492), as.double(13.5285784), as.double(0.1658439), as.double(0.47818072), NA, as.double(0.02406953))
# Merge DAT and Trad coef dfs
par_join <- bind_rows(par_dat, par_trad)
class(par_dat)
class(par_dat$Vcmax)
par_dat$Vcmax <- as.double(par_dat$Vcmax)
par_dat$Jmax <- as.double(par_dat$Jmax)
par_dat$Vcmax <- as.double(par_dat$Vcmax)
## Make a dataframe out of coefficients
par_dat <- as.data.frame(coef(DAT_fits_ecophys), row.names = NULL)
par_dat[23,] <- c("K6714L1", 20.8393492, 13.5285784, 0.1658439, 0.47818072, NA, 0.02406953)
#par_dat <- par_dat[-1,]
par_dat <- par_dat %>%
add_column(method = "dat")
par_dat$Vcmax <- as.double(par_dat$Vcmax)
par_dat$Jmax <- as.double(par_dat$Jmax)
par_dat$Rd <- as.double(par_dat$Rd)
par_dat$Vcmax_SE <- as.double(par_dat$Vcmax_SE)
par_dat$Jmax_SE <- as.double(par_dat$Jmax_SE)
par_dat$Rd_SE <- as.double(par_dat$Rd_SE)
table(par_dat$method) ## number of initial DAT curves
# Merge DAT and Trad coef dfs
par_join <- bind_rows(par_dat, par_trad)
head(par_join)
write.csv(x = par_join, file = paste0(wd, "/Results/params_ecophys_no_TPU.csv"), row.names = FALSE)
## Fit the ACi curves for each species for DAT using fitacis
DAT_fits_ecophys <- fitacis(DAT_filt_ex, group = "unique", fitmethod = "bilinear",
varnames = list(ALEAF = "A", Tleaf = "Tleaf", Ci = "Ci",
PPFD = "Qin"), fitTPU = FALSE, Tcorrect = TRUE)
View(k6714l1)
View(DAT_fits_ecophys)
library(photosynthesis)
?fit_aci_response
cmplt.rm_out <- read.csv(file = paste0(wd, "Inputs/Aci_no_out.csv"), header = TRUE, sep = ",")
DAT_filt <- filter(cmplt.rm_out, Data_point == "Before_DAT")
cmplt_trad <- filter(cmplt.rm_out, Data_point == "Traditional")
DAT_filt_ex <- DAT_filt %>%
group_by(unique) %>%
group_modify(~exclude_backwardsCi(data = .x, givedf = TRUE), .keep = FALSE)
DAT_filt_ex <- as.data.frame(DAT_filt_ex)
# Convert leaf temperature to Kelvin
DAT_filt$Tleaf <- DAT_filt$Tleaf + 273
cmplt_trad$Tleaf <- cmplt_trad$Tleaf + 273
DAT_filt_ex$Tleaf <- DAT_filt_ex$Tleaf + 273
# fitting many curves at a time
trad_fits_photo <- fit_many(data = cmplt_trad, fitTPU = FALSE,
varnames = list(A_net = "A", T_leaf = "Tleaf", C_i = "Ci", PPFD = "Qin"),
funct = fit_aci_response,
group = "unique")
trad_fits_photo_graphs <- compile_data(trad_fits_photo,
list_element = 2)
trad_fits_photo_pars <- compile_data(trad_fits_photo,
output_type = "dataframe",
list_element = 1)
# PDF file of all plots
pdf(file = paste0(wd,"Figures/dataci_ecophys_no_TPU.pdf"), height=10, width=20)
plot.new()
for (curve in 1:33){
title <- coef(DAT_fits_ecophys)$unique[[curve]]
plot(DAT_fits_ecophys[[curve]], main = title)
}
View(DAT_fits_ecophys)
# PDF file of all plots
minus_k6714l1 <- DAT_fits_ecophys[-23,]
View(DAT_fits_ecophys)
pdf(file = paste0(wd,"Figures/trad_fits_photo_figs_no_TPU.pdf"), height=10, width=20)
dev.off()
pdf(file = paste0(wd,"Figures/trad_fits_photo_figs_no_TPU.pdf"), height=10, width=20)
plot.new()
for (curve in 1:28){
title <- trad_fits_photo_pars$ID[[curve]]
plot(trad_fits_photo_graphs[[curve]], main = title)
text(30, 5, labels = as.character(title))
}
dev.off()
write.csv(x = trad_fits_photo_pars, file = paste0(wd, "Results/trad_fits_photo_pars_no_TPU.csv"),
row.names = FALSE)
dat_fits_photo <- fit_many(data = DAT_filt_ex, fitTPU = FALSE,## uses the back-filtered data
varnames = list(A_net = "A", T_leaf = "Tleaf", C_i = "Ci", PPFD = "Qin"),
funct = fit_aci_response,
group = "unique")
dat_fits_photo_graphs <- compile_data(dat_fits_photo,
list_element = 2)
dat_fits_photo_pars <- compile_data(dat_fits_photo,
output_type = "dataframe",
list_element = 1)
pdf(file = paste0(wd,"Figures/dat_fit_photo_figs_filt_no_TPU.pdf"), height=10, width=20)
plot.new()
for (curve in 1:30){ ### Change this depending on the number of curves!
title <- dat_fits_photo_pars$ID[[curve]]
plot(dat_fits_photo_graphs[[curve]], main = title)
text(30, 5, labels = as.character(title))
}
dev.off()
pdf(file = paste0(wd,"Figures/dat_fit_photo_figs_filt_no_TPU.pdf"), height=10, width=20)
plot.new()
for (curve in 1:34){ ### Change this depending on the number of curves!
title <- dat_fits_photo_pars$ID[[curve]]
plot(dat_fits_photo_graphs[[curve]], main = title)
text(30, 5, labels = as.character(title))
}
dev.off()
pdf(file = paste0(wd,"Figures/dat_fit_photo_figs_filt_no_TPU.pdf"), height=10, width=20)
plot.new()
for (curve in 1:33){ ### Change this depending on the number of curves!
title <- dat_fits_photo_pars$ID[[curve]]
plot(dat_fits_photo_graphs[[curve]], main = title)
text(30, 5, labels = as.character(title))
}
dev.off()
write.csv(x = dat_fits_photo_pars, file = paste0(wd, "Results/dat_fits_photo_pars_filt_no_TPU.csv"),
row.names = FALSE)
